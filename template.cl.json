{
"AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation - Proyecto Virtualizaci√≥n",
    "Resources": {
        "musictastevpc": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
            "CidrBlock": "10.0.0.0/16"
          }
        },
        "musictastesubnetprivate1": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "AvailabilityZone": "us-east-2a",
            "VpcId": { "Ref" : "musictastevpc" },
            "CidrBlock": "10.0.1.0/24"
          }
        },
        "musictastesubnetprivate2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "AvailabilityZone": "us-east-2b",
              "VpcId": { "Ref" : "musictastevpc" },
              "CidrBlock": "10.0.2.0/24"
            }
        },
        "musictastesubnetpublic1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "AvailabilityZone": "us-east-2a",
              "VpcId": { "Ref" : "musictastevpc" },
              "CidrBlock": "10.0.3.0/24"
            }
        },
        "musictastesubnetpublic2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "AvailabilityZone": "us-east-2b",
              "VpcId": { "Ref" : "musictastevpc" },
              "CidrBlock": "10.0.4.0/24"
            }
        },
        "musictastesecuritygroup" : {
          "Type" : "AWS::EC2::SecurityGroup",
          "Properties" : {
            "GroupDescription" : "For instances",
            "SecurityGroupIngress" : [ 
                { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" },
                { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" },
                { "IpProtocol" : "tcp", "FromPort" : "88", "ToPort" : "88", "CidrIp" : "0.0.0.0/0" },
                { "IpProtocol" : "tcp", "FromPort" : "8000", "ToPort" : "8000", "CidrIp" : "0.0.0.0/0" },
                { "IpProtocol" : "tcp", "FromPort" : "8888", "ToPort" : "8888", "CidrIp" : "0.0.0.0/0" }
            ],
            "SecurityGroupEgress" : [ 
              { "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" }
            ],
            "VpcId": { "Ref" : "musictastevpc" }
          }
        },
        "musictasteinternetgateway": {
          "Type": "AWS::EC2::InternetGateway"
        },
        "AttachGateway": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
            "VpcId": { "Ref" : "musictastevpc" },
            "InternetGatewayId": { "Ref": "musictasteinternetgateway" }
          }
        },
        "musictasteroutetableprivate": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": { "Ref" : "musictastevpc" }
          }
        },
        "musictasteroutetablepublic": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": { "Ref" : "musictastevpc" }
            }
        },
        "musictasteinternetroute": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "RouteTableId": {"Ref" : "musictasteroutetablepublic"},
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {"Ref" : "musictasteinternetgateway"}
          }
        },
        "musictastesubnetroutetableprivate1": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {"Ref" : "musictastesubnetprivate1"},
            "RouteTableId": {"Ref": "musictasteroutetableprivate"}
          }
        },
        "musictastesubnetroutetablepublic1": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {"Ref":"musictastesubnetpublic1"},
            "RouteTableId": {"Ref":"musictasteroutetablepublic"}
          }
        },
        "musictastesubnetroutetableprivate2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {"Ref" : "musictastesubnetprivate2"},
              "RouteTableId": {"Ref": "musictasteroutetableprivate"}
            }
          },
          "musictastesubnetroutetablepublic2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {"Ref":"musictastesubnetpublic2"},
              "RouteTableId": {"Ref":"musictasteroutetablepublic"}
            }
          },
        "musictasteacl" : {
            "Type" : "AWS::EC2::NetworkAcl",
            "Properties" : {
               "VpcId" : { "Ref" : "musictastevpc" }
            }
        },
        "musictasteaclingress" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
               "NetworkAclId" : { "Ref" : "musictasteacl" },
               "RuleNumber" : "100",
               "Protocol" : "-1",
               "RuleAction" : "allow",
               "Egress" : "false",
               "CidrBlock" : "0.0.0.0/0"
            }
        },
        "musictasteaclegress" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
               "NetworkAclId" : { "Ref" : "musictasteacl" },
               "RuleNumber" : "100",
               "Protocol" : "-1",
               "RuleAction" : "allow",
               "Egress" : "true",
               "CidrBlock" : "0.0.0.0/0"
            }
        },
        "musictastesubnetprivate1acl" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
               "SubnetId" : { "Ref" : "musictastesubnetprivate1" },
               "NetworkAclId" : { "Ref" : "musictasteacl" }
            }
        },
        "musictastesubnetprivate2acl" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
               "SubnetId" : { "Ref" : "musictastesubnetprivate2" },
               "NetworkAclId" : { "Ref" : "musictasteacl" }
            }
        },
        "musictastesubnetpublic1acl" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
               "SubnetId" : { "Ref" : "musictastesubnetpublic1" },
               "NetworkAclId" : { "Ref" : "musictasteacl" }
            }
        },
        "musictastesubnetpublic2acl" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
               "SubnetId" : { "Ref" : "musictastesubnetpublic2" },
               "NetworkAclId" : { "Ref" : "musictasteacl" }
            }
        },
        "musictastevm": {
          "Type": "AWS::EC2::Instance",
          "Properties": {
            "KeyName": "aws_apitestinstance",
            "ImageId": "ami-0b3a979bd272987e9",
            "InstanceType": "t2.micro",
            "Monitoring": "false",
            "UserData": {
                "Fn::Base64": {
                    "Fn::Join": [
                        "\n",
                        [
                            "#!/bin/bash",
                            "docker run --restart unless-stopped -d -p 80:3000 mf_crud",
                            "docker run --restart unless-stopped -d -p 8888:3000 mf_file_upload",
                            "docker run --restart unless-stopped -d -p 8000:3000 mf_rekognition",
                            "docker run --restart unless-stopped -d -p 88:3000 mf_weather_api",
                            "docker ps"
                        ]
                    ]
                }
            },
            "NetworkInterfaces": [ {
                "AssociatePublicIpAddress": "true",
                "DeviceIndex": "0",
                "GroupSet": [{ "Ref" : "musictastesecuritygroup" }],
                "SubnetId": { "Ref" : "musictastesubnetpublic1" }
            } ]
          }
        },
        "musictastecrud" : {
          "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
          "Properties" : {
            "HealthCheckIntervalSeconds": 30,
            "HealthCheckProtocol": "HTTP",
            "HealthCheckTimeoutSeconds": 10,
            "HealthyThresholdCount": 4,
            "Matcher" : {
              "HttpCode" : "200"
            },
            "Name": "mt-crud",
            "Port": 80,
            "Protocol": "HTTP",
            "Targets": [
              { "Id": {"Ref" : "musictastevm"}, "Port": 80 }
            ],
            "UnhealthyThresholdCount": 3,
            "VpcId": {"Ref":"musictastevpc"}
          }
        },
        "musictastefileupload" : {
          "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
          "Properties" : {
            "HealthCheckIntervalSeconds": 30,
            "HealthCheckProtocol": "HTTP",
            "HealthCheckTimeoutSeconds": 10,
            "HealthyThresholdCount": 4,
            "Matcher" : {
              "HttpCode" : "200"
            },
            "Name": "mt-file-upload",
            "Port": 8888,
            "Protocol": "HTTP",
            "Targets": [
              { "Id": {"Ref" : "musictastevm"}, "Port": 8888 }
            ],
            "UnhealthyThresholdCount": 3,
            "VpcId": {"Ref":"musictastevpc"}
          }
        },
        "musictasterekognition" : {
          "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
          "Properties" : {
            "HealthCheckIntervalSeconds": 30,
            "HealthCheckProtocol": "HTTP",
            "HealthCheckTimeoutSeconds": 10,
            "HealthyThresholdCount": 4,
            "Matcher" : {
              "HttpCode" : "200"
            },
            "Name": "mt-rekognition",
            "Port": 8000,
            "Protocol": "HTTP",
            "Targets": [
              { "Id": {"Ref" : "musictastevm"}, "Port": 8000 }
            ],
            "UnhealthyThresholdCount": 3,
            "VpcId": {"Ref":"musictastevpc"}
          }
        },
        "musictasteweatherapi" : {
          "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
          "Properties" : {
            "HealthCheckIntervalSeconds": 30,
            "HealthCheckProtocol": "HTTP",
            "HealthCheckTimeoutSeconds": 10,
            "HealthyThresholdCount": 4,
            "Matcher" : {
              "HttpCode" : "200"
            },
            "Name": "mt-weather-api",
            "Port": 88,
            "Protocol": "HTTP",
            "Targets": [
              { "Id": {"Ref" : "musictastevm"}, "Port": 8888 }
            ],
            "UnhealthyThresholdCount": 3,
            "VpcId": {"Ref":"musictastevpc"}
          }
        },
        "musictasteloadbalancer" : {
          "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
          "Properties": {
            "Name" : "mt-loadbalancer",
            "Scheme" : "internet-facing",
            "Subnets" : [ {"Ref":"musictastesubnetpublic1"}, {"Ref":"musictastesubnetpublic2"}],
            "SecurityGroups": [{"Ref":"musictastesecuritygroup"}]
          }
        },
        "listenercrud": {
          "Type": "AWS::ElasticLoadBalancingV2::Listener",
          "Properties": {
              "DefaultActions": [
                  {
                      "Type": "forward",
                      "TargetGroupArn": {"Ref":"musictastecrud"}
                  }
              ],
              "LoadBalancerArn": {
                "Ref": "musictasteloadbalancer"
              },
              "Port": 80,
              "Protocol": "HTTP"
          }
        },
        "listenerfileupload": {
          "Type": "AWS::ElasticLoadBalancingV2::Listener",
          "Properties": {
              "DefaultActions": [
                  {
                      "Type": "forward",
                      "TargetGroupArn": {"Ref":"musictastefileupload"}
                  }
              ],
              "LoadBalancerArn": {
                "Ref": "musictasteloadbalancer"
              },
              "Port": 8888,
              "Protocol": "HTTP"
          }
        },
        "listenerrekognition": {
          "Type": "AWS::ElasticLoadBalancingV2::Listener",
          "Properties": {
              "DefaultActions": [
                  {
                      "Type": "forward",
                      "TargetGroupArn": {"Ref":"musictasterekognition"}
                  }
              ],
              "LoadBalancerArn": {
                "Ref": "musictasteloadbalancer"
              },
              "Port": 8000,
              "Protocol": "HTTP"
          }
        },
        "listenerweatherapi": {
          "Type": "AWS::ElasticLoadBalancingV2::Listener",
          "Properties": {
              "DefaultActions": [
                  {
                      "Type": "forward",
                      "TargetGroupArn": {"Ref":"musictasteweatherapi"}
                  }
              ],
              "LoadBalancerArn": {
                "Ref": "musictasteloadbalancer"
              },
              "Port": 88,
              "Protocol": "HTTP"
          }
        }
    }
}
